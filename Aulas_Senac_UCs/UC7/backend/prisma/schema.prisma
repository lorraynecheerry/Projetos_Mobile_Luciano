// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  //provider = "postgresql"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Motoqueiro {
  id       String @id @default(uuid())
  nome     String
  nusuario String
  senha    String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("motoqueiros")
}

model Cliente {
  id          String  @id @default(uuid())
  nome        String
  celular     String
  cpf         String
  email       String
  senha       String
  cep         String
  rua         String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      String

  pedidos Pedido[]

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("clientes")
}

model Usuario {
  id    String @id @default(uuid())
  nome  String
  email String
  senha String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("usuarios")
}

model Categoria {
  id   String @id @default(uuid())
  nome String

  produtos Produto[]

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("categorias")
}

model Produto {
  id         String  @id @default(uuid())
  nome       String
  fabricante String?
  quantidade String
  preco      String
  banner     String

  itens       ItemPedido[]
  categorias  Categoria    @relation(fields: [categoriaId], references: [id])
  categoriaId String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("produtos")
}

model Pedido {
  id          String   @id @default(uuid())
  n_pedido    Int      @unique @default(autoincrement())
  valor_total Decimal? @db.Decimal(9, 2)
  status      String   @default("Aguardando")
  draft       Boolean  @default(true)
  entrega     Boolean  @default(false)
  aceito      Boolean  @default(false)
  entregador  String?

  clientes   Cliente @relation(fields: [id_cliente], references: [id])
  id_cliente String

  itens ItemPedido[]

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("pedidos")
}

model ItemPedido {
  id         String  @id @default(uuid())
  quantidade Int
  valor      Decimal @db.Decimal(9, 2)

  pedidos    Pedido  @relation(fields: [id_pedido], references: [id])
  id_pedido  String
  produtos   Produto @relation(fields: [id_produto], references: [id])
  id_produto String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("itens_pedido")
}